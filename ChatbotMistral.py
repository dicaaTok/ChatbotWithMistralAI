import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

(
    CHOOSE_LANG, QUIZ, NEXT_STEP,
    CHOOSE_DIRECTION, CHOOSE_TEST_TYPE,
    HANDLE_TEST, HANDLE_FREE_QUESTION
) = range(7)

LANGUAGES = {
    "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—á–∞": "ky",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
    "üá¨üáß English": "en"
}

INTRO_MESSAGES = {
    "ru": "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π HR-–±–æ—Ç ü§ñ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –∏ —Ç–µ—Å—Ç–∞–º.",
    "ky": "–°–∞–ª–∞–º! –ú–µ–Ω —Å–µ–Ω–∏–Ω –∂–µ–∫–µ HR-–±–æ—Ç—É“£ ü§ñ –ú–µ–Ω –∏–Ω—Ç–µ—Ä–≤—å—é –∂–∞–Ω–∞ —Ç–µ—Å—Ç–∫–µ –¥–∞—è—Ä–¥–∞–Ω—É—É–≥–∞ –∂–∞—Ä–¥–∞–º –±–µ—Ä–µ–º.",
    "en": "Hey there! I'm your personal HR Bot ü§ñ I'm here to help you prepare for interviews and tests."
}

QUESTIONS = [
    {"key": "about_you", "question": {"ru": "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.", "ky": "”®–∑“Ø“£ —Ç—É—É—Ä–∞–ª—É—É –∞–π—Ç—ã–ø –±–µ—Ä.", "en": "Tell me about yourself."}},
    {"key": "weaknesses", "question": {"ru": "–¢–≤–æ–∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?", "ky": "–ê–ª—Å—ã–∑ –∂–∞–∫—Ç–∞—Ä—ã“£?", "en": "Your weaknesses?"}},
    {"key": "interview_look", "question": {"ru": "–ß—Ç–æ –Ω–∞–¥–µ–Ω–µ—à—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é?", "ky": "–ò–Ω—Ç–µ—Ä–≤—å—é–≥–∞ —ç–º–Ω–µ –∫–∏–π–µ—Å–∏“£?", "en": "What will you wear to the interview?"}}
]

NEXT_STEPS = {
    "ru": "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
    "ky": "–≠–º–∏ —ç–º–Ω–µ –∫—ã–ª–∞–±—ã–∑?",
    "en": "What would you like to do next?"
}

OPTIONS = {
    "ru": ["üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "üìã –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    "ky": ["üß† –¢–µ—Å—Ç", "üìã –ö–µ“£–µ—à", "üí¨ –°—É—Ä–æ–æ –±–µ—Ä“Ø“Ø", "üîÅ –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ"],
    "en": ["üß† Take quiz", "üìã Get advice", "üí¨ Ask a question", "üîÅ Restart"]
}

DIRECTIONS = {
    "ru": ["üíª Frontend", "üñ• Backend", "üì± Mobile", "üß† Data Science"],
    "ky": ["üíª –§—Ä–æ–Ω—Ç–µ–Ω–¥", "üñ• –ë—ç–∫–µ–Ω–¥", "üì± –ú–æ–±–∏–ª–¥–∏–∫", "üß† –î–∞—Ç–∞ –°–∞–π–µ–Ω—Å"],
    "en": ["üíª Frontend", "üñ• Backend", "üì± Mobile", "üß† Data Science"]
}

TEST_TYPES = {
    "ru": ["üìö –¢–µ–æ—Ä–∏—è", "üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞"],
    "ky": ["üìö –¢–µ–æ—Ä–∏—è", "üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞"],
    "en": ["üìö Theory", "üõ† Practice"]
}

def typing_action(func):
    async def command_func(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        await update.message.chat.send_action(action=ChatAction.TYPING)
        return await func(update, context, *args, **kwargs)
    return command_func

@typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[k] for k in LANGUAGES.keys()]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose language / –¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞:", reply_markup=markup)
    return CHOOSE_LANG

@typing_action
async def choose_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = LANGUAGES.get(update.message.text, "ru")
    context.user_data.update({'lang': lang, 'answers': {}, 'quiz_index': 0})
    await update.message.reply_text(INTRO_MESSAGES[lang])
    return await ask_question(update, context)

@typing_action
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    i = context.user_data['quiz_index']
    if i >= len(QUESTIONS):
        return await analyze_answers(update, context)
    lang = context.user_data['lang']
    q = QUESTIONS[i]['question'][lang]
    await update.message.reply_text(q)
    return QUIZ

@typing_action
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    i = context.user_data['quiz_index']
    key = QUESTIONS[i]['key']
    context.user_data['answers'][key] = update.message.text
    context.user_data['quiz_index'] += 1
    return await ask_question(update, context)

@typing_action
async def analyze_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']
    answers = context.user_data.get('answers', {})
    if not any(answers.values()):
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        return NEXT_STEP

    prompt = {
        "ru": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç—É:",
        "ky": "–ñ–æ–æ–ø—Ç–æ—Ä–¥—É –∞–Ω–∞–ª–∏–∑–¥–µ–ø –∫–µ“£–µ—à –±–µ—Ä:",
        "en": "Analyze the answers and give advice:"
    }[lang] + "\n" + "\n".join(answers.values())

    feedback = await generate_response(prompt, lang)
    await update.message.reply_text("üìã –§–∏–¥–±–µ–∫:\n" + feedback)

    buttons = [[KeyboardButton(opt)] for opt in OPTIONS[lang]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(NEXT_STEPS[lang], reply_markup=markup)
    return NEXT_STEP

@typing_action
async def handle_next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text
    if "üîÅ" in text:
        return await choose_lang(update, context)
    elif "üìã" in text:
        return await analyze_answers(update, context)
    elif "üß†" in text:
        buttons = [[KeyboardButton(d)] for d in DIRECTIONS[lang]]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)
        return CHOOSE_DIRECTION
    elif "üí¨" in text:
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É:")
        return HANDLE_FREE_QUESTION
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return NEXT_STEP

@typing_action
async def choose_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['direction'] = update.message.text
    lang = context.user_data['lang']
    buttons = [[KeyboardButton(t)] for t in TEST_TYPES[lang]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞:", reply_markup=markup)
    return CHOOSE_TEST_TYPE

@typing_action
async def choose_test_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['test_type'] = update.message.text
    lang = context.user_data['lang']
    direction = context.user_data['direction']
    test_type = context.user_data['test_type']

    prompt = {
        "ru": f"–°–æ—Å—Ç–∞–≤—å {test_type.lower()} –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {direction} –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –æ–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "ky": f"{direction} –±–∞–≥—ã—Ç—ã –±–æ—é–Ω—á–∞ {test_type.lower()} —Ç–µ—Å—Ç —Ç“Ø–∑ –∂–∞–Ω–∞ –∫–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –∂–æ–æ–ø—Ç–æ—Ä—É–Ω –∫“Ø—Ç.",
        "en": f"Create a {test_type.lower()} quiz for the {direction} field in English and wait for user's answers."
    }[lang]

    test = await generate_response(prompt, lang)
    context.user_data['test'] = test
    await update.message.reply_text("üß† –¢–µ—Å—Ç:\n" + test)
    return HANDLE_TEST

@typing_action
async def handle_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['user_test_answers'] = update.message.text
    lang = context.user_data['lang']
    test = context.user_data['test']
    user_answers = context.user_data['user_test_answers']

    prompt = {
        "ru": f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ:\n{test}\n–û—Ç–≤–µ—Ç—ã:\n{user_answers}\n–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–≤–µ—Ç—ã.",
        "ky": f"–¢–µ—Å—Ç –∂–∞–Ω–∞ –∂–æ–æ–ø—Ç–æ—Ä–¥—É –∞–Ω–∞–ª–∏–∑–¥–µ–ø, –∫–µ“£–µ—à –±–µ—Ä:\n{test}\n–ñ–æ–æ–ø—Ç–æ—Ä:\n{user_answers}",
        "en": f"Analyze the user's test answers:\n{test}\nAnswers:\n{user_answers}\nGive detailed analysis and suggestions."
    }[lang]

    feedback = await generate_response(prompt, lang)
    await update.message.reply_text("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n" + feedback)

    buttons = [[KeyboardButton(opt)] for opt in OPTIONS[lang]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(NEXT_STEPS[lang], reply_markup=markup)
    return NEXT_STEP

@typing_action
async def handle_free_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    question = update.message.text

    prompt = {
        "ru": f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã:\n{question}",
        "ky": f"–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω —Å—É—Ä–æ–æ—Å—É–Ω–∞ –∂–æ–æ–ø –±–µ—Ä–∏–ø, –∫–µ“£–µ—à –±–µ—Ä:\n{question}",
        "en": f"Answer the user's question and give advice:\n{question}"
    }[lang]

    answer = await generate_response(prompt, lang)
    await update.message.reply_text("üß† –û—Ç–≤–µ—Ç:\n" + answer)

    buttons = [[KeyboardButton(opt)] for opt in OPTIONS[lang]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(NEXT_STEPS[lang], reply_markup=markup)
    return NEXT_STEP

async def generate_response(prompt, lang):
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistral-small",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }
    try:
        response = requests.post("https://api.mistral.ai/v1/chat/completions", headers=headers, json=data)
        if response.ok:
            return response.json()['choices'][0]['message']['content']
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}"
    except Exception as e:
        return f"üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

app = ApplicationBuilder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSE_LANG: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_lang)],
        QUIZ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        NEXT_STEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_next_step)],
        CHOOSE_DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_direction)],
        CHOOSE_TEST_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_test_type)],
        HANDLE_TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test)],
        HANDLE_FREE_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_free_question)],
    },
    fallbacks=[]
)

app.add_handler(conv_handler)

print("üöÄ HR –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()
